

------------------------------------------------------------Объекты-------------------------------------------------------------





Объект может быть создан с помощью фигурных скобок {…} с необязательным списком свойств. Свойство – это пара «ключ: значение», где ключ – это строка (также называемая «именем свойства»), а значение может быть чем угодно.


++++++++++++++++++ПРИМЕР++++++++++++++++++++
let user = {     // объект
  name: "John",  // под ключом "name" хранится значение "John"
  age: 30        // под ключом "age" хранится значение 30
};
++++++++++++++++++++++++++++++++++++++++++++

Можно сказать, что наш объект user – это ящик с двумя папками, подписанными «name» и «age».
Имя свойства может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки.


Квадратные скобки  позволяют обратиться к свойству, имя которого может быть результатом выражения. Например, имя свойства может храниться в переменной.


++++++++++++++++++ПРИМЕР++++++++++++++++++++
let key = "likes birds";

// то же самое, что и user["likes birds"] = true;
user[key] = true;
++++++++++++++++++++++++++++++++++++++++++++



В реальном коде часто нам необходимо использовать существующие переменные как значения для свойств с тем же именем.



++++++++++++++++++ПРИМЕР++++++++++++++++++++
function makeUser(name, age) {
  return {
    name: name,
    age: age
    // ...другие свойства
  };
}

let user = makeUser("John", 30);
alert(user.name); // John
++++++++++++++++++++++++++++++++++++++++++++



В примере выше название свойств name и age совпадают с названиями переменных, которые мы подставляем в качестве значений этих свойств. Такой подход настолько распространён, что существуют специальные короткие свойства для упрощения этой записи.
Вместо name:name мы можем написать просто name: .Мы можем использовать как обычные свойства, так и короткие в одном и том же объекте.

Как мы уже знаем, имя переменной не может совпадать с зарезервированными словами, такими как «for», «let», «return» и т.д.
Но для свойств объекта такого ограничения нет.Иными словами, нет никаких ограничений к именам свойств


В отличие от многих других языков, особенность JavaScript-объектов в том, что можно получить доступ к любому свойству. Даже если свойства не существует – ошибки не будет! При обращении к свойству, которого нет, возвращается undefined. Это позволяет просто проверить существование свойства.


+++++++++++++++++++++++++++++ПРИМЕР+++++++++++++++++++++++++++++++++++++++
let user = {};
alert( user.noSuchProperty === undefined ); // true означает "свойства нет"
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Для перебора всех свойств объекта используется цикл for..in. Этот цикл отличается от изученного ранее цикла for(;;).

::::::::::::::::::::::::::::::СИНТАКСИС:::::::::::::::::::::::::
for (key in object) {
  // тело цикла выполняется для каждого свойства объекта
}
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::










